delimiters "$","$"

symbols ::= [
	"copyright":"&copy;",
	"tm":"&trade;",
	"[":"["
]

/*
NOTES

From: https://css-tricks.com/probably-dont-base64-svg/
<img src="data:image/svg+xml;base64,[data]"> for embedding SVG directly in HTML doc with base64
<img src='data:image/svg+xml;utf8,<svg ... > ... </svg>'>
make sure to take <?xml version="1.0" encoding="UTF-8"?> tag off the head of .svg file.
*/

header(title,css,googletracking,metadata) ::= <<
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
$if(googletracking)$
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=$googletracking$"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', '$googletracking$');
</script>
$endif$
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,400" />
<link rel="stylesheet" type="text/css" href="$css$"/>
<title>$title$</title>
$webmetadata(metadata)$
</head>
<body>
>>

footer() ::= <<
</body>
</html>
>>

// title,imageurl,description,url,pagetype,twitterhandle
webmetadata(data) ::= <<
<!-- META -->
<!-- LinkedIn meta -->
<meta property='og:title' content="$data.title$"/>
<meta property='og:image' content="$data.imageurl$">
<meta property='og:description' content="$data.description$"/>
<meta property='og:url' content="$data.url$"/>

<!-- Facebook meta -->
<meta property="og:type" content="$data.pagetype$" />

<!-- Twitter meta -->
<meta name="twitter:title" content="$data.title$">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="$data.twitterhandle$">
<meta name="twitter:creator" content="$data.twitterhandle$">
<meta name="twitter:description" content="$data.description$">
<meta name="twitter:image" content="$data.imageurl$">
<!-- END META -->
>>

/** This is the title page, TOC etc... for the book. Chapters and
 *  all content in separate files.  Article has no main page.
 *
 *  'file' attribute available to all nested templates.
 */
BookFrontMatterFile(file) ::= <<
$header(title=file.book.title, css=file.book.cssFile,
        googletracking=file.attributes.googletracking,
        metadata=file.book.metadata)$


<h1>$file.title$</h1>

$if(file.attributes.version)$
<div class="watermark">
<i>$file.attributes.watermark$</i><br>
Book version $file.attributes.version$
</div>
$endif$

<p>$file.attributes.author$</p>
<p style="font-size: 80%; line-height:1.1;">$file.book.copyright$</font></p>

$if(file.book.abstract_)$
<p>$file.book.abstract_$</p>
$endif$

<div id="toc">
<p class="toc_title">Contents</p>
<ul>
$file.chapterDocuments:{chap |
	<li><a href="$chap.generatedFilename$">$chap.title$</a></li>
	<ul>
	$chap.subcontainers:{sec |
		<li><a href="$chap.generatedFilename$#$sec.anchor$">$sec.title$</a></li>
	}$
	</ul>
}$
</ul>
</div>

$footer()$
>>

/** Any kind of output document; wraps chapter but not book toc.
 *  'artifact' attribute available to all nested templates.
 *  There is no file attribute as OutputFile has no model object.
 */
OutputFile(artifact, title, body, numbering) ::= <<
$header(title=title, css=artifact.cssFile,
        googletracking=artifact.attributes.googletracking,
        metadata=artifact.metadata)$
$body$
$footer()$
>>

/** Also represents an article page */
Chapter(chapter, preabstract, abstract_, content, subcontainers) ::= <<
<div class="watermark">
$if(chapter.artifact.attributes.watermark)$
<i>$chapter.artifact.attributes.watermark$</i><br>
$endif$
$if(chapter.artifact.attributes.version)$
Book version $chapter.artifact.attributes.version$
$endif$
</div>

<h1>$if(numbering)$$chapter.def.entityID$ $endif$$chapter.title$</h1>

<p>$chapter.artifact.attributes.author$</p>

<p>$chapter.attributes.author$</p>

<p style="font-size: 80%; line-height:1.1;">$chapter.artifact.copyright$</p>

$preabstract$

$abstract_$

$if(chapter.subcontainers)$
<div id="toc">
<p class="toc_title">Contents</p>
<ul>
$chapter.subcontainers:{sec |
	<li><a href="#$sec.anchor$">$sec.title$</a>
	<ul>
	$sec.subcontainers:{subsec |
		<li><a href="#$subsec.anchor$">$subsec.title$</a></li>
	}$
	</ul>
	</li>
}$
</ul>
</div>
$endif$

$content$

$subcontainers$
>>

NotebooksIndexFile(file,artifact,names,booktitle) ::= <<
$header(title={Jupyter Notebook Files for $booktitle$},
        css={../$file.cssFile$},
        googletracking=file.attributes.googletracking,
        metadata=file.book.metadata)$

<h1>Jupyter Notebook Files for $booktitle$</h1>

<ul>
$names:{n | <li><a href="$n$.ipynb">$n$.ipynb</a></li>}; separator="\n"$
</ul>

$footer()$
>>

Author(model, author) ::= <<

<p id="author">$author$</p>

>>

Abstract(model, elements) ::= <<
<p><b>Abstract</b></p>
<p>$elements$</p>

>>

PreAbstract(model, elements) ::= <<

<p>$elements$</p>

>>

Section(model, content, subcontainers) ::= <<

<h2 id="$model.anchor$">$if(numbering)$$model.def.entityID$ $endif$$model.title$</h2>

$content$

$subcontainers$

>>

SubSection(model, content, subcontainers) ::= <<

<h3 id="$model.anchor$">$if(numbering)$$model.def.entityID$ $endif$$model.title$</h3>

$content$

$subcontainers$

>>

SubSubSection(model, content, subcontainers) ::= <<

<h4 id="$model.anchor$">$if(numbering)$$model.def.entityID$ $endif$$model.title$</h4>

$content$

>>

TextBlock(model,elements) ::= "$elements$"

SideQuote(model) ::= "<p class=sidenote><span class=sup>$model.def.index$</span>&nbsp;&ldquo;<i>$model.def.attributes.quote$</i>&rdquo; &mdash; $model.def.attributes.author$</p>"

SideNote(model,text) ::= "<p class=sidenote><span class=sup>$model.def.index$</span>$text$</p>"

Citation(model) ::= "<p class=sidenote><span class=sup>$model.def.index$</span>&nbsp;&ldquo;<i>$model.def.title$</i>&rdquo; &mdash; $model.def.author$</p>"

ChapQuote(model) ::= "<p>&ldquo;<i>$model.quote$</i>&rdquo; &mdash; $model.author$</p>"

dumpCode(code) ::= <<
$\n$
<div class="codeblk">$code; format="xml-encode"$</div>
>>

BlockCode(model) ::= <<
$dumpCode(model.code)$
$\n$
>>

PyEval(model) ::= <<
$if(model.codeDef.isCodeVisible)$
$dumpCode({$if(model.codeDef.code)$$model.codeDef.code; format="xml-encode"$$\n$$endif$$if(model.codeDef.displayExpr)$print($model.codeDef.displayExpr$)$endif$})$
$endif$

$if(model.stdout&&model.displayData)$
<p class="stdout">$model.stdout; format="xml-encode"$
$model.displayData; format="xml-encode"$</p>
$elseif(model.stdout)$
<p class="stdout">$model.stdout; format="xml-encode"$</p>
$elseif(model.displayData)$
<p class="stdout">$model.displayData; format="xml-encode"$</p>
$endif$

$if(model.stderr)$<p class="stderr">$model.stderr; format="xml-encode"$</p>$endif$
>>

InlinePyEval(model) ::= <<
$if(model.stderr)$<span class="stderr">$model.stderr; format="xml-encode"$</span>$else$$model.displayData$$endif$
>>

PyEvalDataFrame(model) ::= <<
$if(model.codeDef.isCodeVisible)$
$dumpCode({$model.codeDef.code$$if(model.codeDef.displayExpr)$$\n$$model.codeDef.displayExpr$$endif$})$
$endif$
$if(model.stdout)$<p class="stdout">$model.stdout; format="xml-encode"$</p>$endif$
$if(model.stderr)$<p class="stderr">$model.stderr; format="xml-encode"$</p>$endif$
$dataTable(model.dataTable)$
>>

dataTable(dt) ::= <<
<div class="scrollbar_wrapper">
<table class="dataframe $if(dt.firstColIsIndex)$dataframe-indexed$endif$">
<thead>
$if(dt.firstColIsIndex)$
	<tr><th>&nbsp;</th>$rest(dt.colNames):{c | <th>$c$</th>}$</tr>
    <tr><td>$first(dt.colNames)$</td></tr>
$else$
	<tr>$dt.colNames:{c | <th>$c$</th>}$</tr>
$endif$
</thead>
<tbody>
	$dt.rows:{r | $dataTableRow(dt,r)$}; separator="\n"$
</tbody>
</table>
</div>
>>

dataTableRow(dt,r) ::= <<
<tr>
$r:{c| <td>$c$</td>}$
</tr>
>>

PyFig(model) ::= <<
$if(model.args.side)$
<div class="p_wrapper">
<span class=sidenote>
$if(!model.args.hide)$
&#187; <i>Generated by code to left</i><br>
$endif$
<a href="$model.codeDef.generatedFilenameNoSuffix$.svg"><img src="$model.codeDef.generatedFilenameNoSuffix$.svg"
  width="$model.args.width$%"
></a>
</span>
$endif$
$if(model.codeDef.isCodeVisible)$
$dumpCode(model.codeDef.code)$
$endif$
$if(!model.args.side)$
<center>
<a href="$model.codeDef.generatedFilenameNoSuffix$.svg"><img src="$model.codeDef.generatedFilenameNoSuffix$.svg"
  width="$model.args.width$%"
></a>
</center>
$else$
</div> <!-- end div for p_wrapper -->
$endif$
$if(model.stderr)$<p class="stderr">$model.stderr$</p>$endif$
>>

Site(model) ::= "<span class=sidenote><span class=sup>$model.def.index$</span>&nbsp;<tt>$model.def.website$</tt></span>"

Figure(model, code) ::= <<
<span class=figure>$code$<center><b>Figure $model.def.enclosingChapter.index$.$model.def.index$</b>. $model.caption$</center></span>
>>

SideFigure(model, code) ::= <<
<span class=sidenote>$code$<br><b>Figure $model.def.enclosingChapter.index$.$model.def.index$</b>. $model.caption$</span>
>>

YouTube(model) ::= <<
<iframe src="$model.src$?autoplay=0&rel=0" $if(model.width)$width="$model.width$"$endif$ $if(model.height)$height="$model.height$"$endif$ frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
>>

// side stuff collected into Paragraph model and float:right'd for HTML (but not latex)
SiteRef(model) ::= "<span class=sup>$model.def.index$</span>"
CitationRef(model) ::= "<span class=sup>$model.def.index$</span>"
FigureRef(model) ::= "<b>Figure $model.def.enclosingChapter.index$.$model.def.index$</b>"
SideNoteRef(model) ::= "<span class=sup>$model.def.index$</span>"
SideQuoteRef(model) ::= "<span class=sup>$model.def.index$</span>"

SectionRef(model) ::= "<b>Section$if(numbering)$ $model.def.entityID$$endif$</b> <i>$model.def.title$</i>"
/* what is filename?
<<
<a href="#$model.def.label$"><b>Section $model.def.index$</b> <i>$model.def.title$</i></a>
>>
*/

ChapterRef(model) ::= "<b>Chapter $model.def.index$</b> <i>$model.def.title$</i>"
CalloutRef(model) ::= "" // show nothing; ref just identifies which para to associate with
UnknownRef(model) ::= <<
<span style="color: red">[$model.def.label$]</span>
>>

UnknownSymbol(model) ::= <<
<span style="color: red">!$model.symbolName$!</span>
>>

OrderedList(model, items) ::= <<
<ol>
$items; separator="\n"$
</ol>
>>

UnOrderedList(model, items) ::= <<
<ul>
$items; separator="\n"$
</ul>
>>

ListItem(model, elements) ::= "<li>$elements$</li>"

Table(model, headers, rows) ::= <<
<center>
<table style="">
<thead>
$headers$
</thead>
<tbody>
$rows; separator="\n"$
</tbody>
</table>
</center>
>>

TableRow(model, items) ::= <<
<tr>
$items$
</tr>
>>

TableRowItem(model, contents) ::= <<
<td valign=top $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$>$contents$</td>
>>

TableHeaderItem(model, contents) ::= <<
<th valign=top $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$>$contents$</th>
>>

Paragraph(model, content) ::= <<

$if(model.entitiesRefd)$
<div class="p_wrapper">
$model.entitiesRefd:{d | $d.template$}$
<p class=p_left>$content$</p>
</div>
$else$
<p>$content$</p>
$endif$

>>

InlineImage(model) ::= <<
<img style="vertical-align: middle;" src="$model.src$">
>>

Image(model) ::= <<
$if(model.attributes.side)$
<div class="p_wrapper">
<span class=sidenote>
$endif$
$if(!model.attributes.nocenter)$<center>$endif$
$if(model.attributes.url)$<a href="$model.attributes.url$">$endif$
<img $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$>
$if(model.attributes.url)$</a>$endif$
$if(!model.attributes.nocenter)$</center>$endif$
$if(model.attributes.side)$
</span>
</div>
$endif$
>>

BlockImage(model) ::= <<$\n$
$if(!model.attributes.nocenter)$<center>$endif$
$Image(model)$
$if(!model.attributes.nocenter)$</center>$endif$
$\n$
>>

XMLTag(model) ::= <<
<$model.name$ $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$>
>>
XMLEndTag(model) ::= "</$model.name$>"

Latex(model) ::= <<

<div><img class="blkeqn" $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$></div>

>>

RawHTML(model) ::= "$model.html$"

BlockEquation(model) ::= <<

<div><img class="blkeqn" $model.attributes:{attr | $attr$="$model.attributes.(attr)$"}; separator=" "$></div>

>>

InlineEquation(model) ::= <<
<img style="vertical-align: -$model.depthTweaked$pt;" src="$model.src$">
>>

EqnVar(model) ::= "<span class=eqn>$model.varname$</span>"
EqnIndexedVar(model) ::= "<span class=eqn>$model.varname$<sub>$model.indexname$</sub></span>"
EqnVecVar(model) ::= "<span class=eqnvec>$model.varname$</span>"
EqnIndexedVecVar(model) ::= "<span class=eqnvec>$model.varname$</span><sub class=eqn>$model.indexname$</sub>"

HyperLink(model) ::= <<
<a href="$model.href$">$model.title$</a>
>>

Quoted(model, elements) ::= "&ldquo;$elements$&rdquo;"

Callout(model, text) ::= "<div class=callout>$text$</div>"

Aside(model, text) ::= <<
<div class=aside><b>$model.attributes.title$</b><br>
$text$
</div>
>>

InlineCode(model) ::= <<
<span class=inlinecode>$model.code; format="xml-encode"$</span>
>>

Bold(model) ::= "<b>$model.text$</b>"
Italics(model) ::= "<i>$model.text$</i>"

Hyphen(model) ::= "&mdash;"

TODO(model) ::= <<
<span style="color: red">{TODO: $model.text$}</span>
>>

LineBreak(model) ::= "<br>"

Text(model) ::= "$model.text$"

Join(model, elements) ::= "$elements$"